// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum PostType {
  AC
  EMBLEM
}

enum Role {
  ADMIN
  USER
}

enum Platform {
  STEAM
  XBOX
  PLAYSTATION
}

model User {
  id        String    @id @default(uuid())
  role      Role      @default(USER)
  username  String    @unique @default(cuid())
  email     String    @unique
  onBoarded Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  posts     Post[]
  likes     Like[]
  dislikes  Dislike[]
}

model Post {
  id          String    @id @default(uuid())
  type        PostType
  platform    Platform
  title       String
  shareCode   String
  description String?
  images      String[]
  tags        String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  likes       Like[]
  dislikes    Dislike[]
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Dislike {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}
